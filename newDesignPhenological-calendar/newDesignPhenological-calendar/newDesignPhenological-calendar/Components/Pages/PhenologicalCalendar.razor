@page "/phenological-calendar"
@rendermode InteractiveServer
@using System.ComponentModel.DataAnnotations
@inject DataService dataService
@using newDesignPhenologicalcalendar


<PageTitle>Вырастим вместе</PageTitle>

<div class="px-4 py-5 my-3 text-center" style="padding: 24px;">
    <div class="d-block mx-auto mb-4">
        <svg xmlns="http://www.w3.org/2000/svg" width="72" height="57" fill="currentColor" class="bi bi-calendar-week-fill" viewBox="0 0 16 16">
            <path d="M4 .5a.5.5 0 0 0-1 0V1H2a2 2 0 0 0-2 2v1h16V3a2 2 0 0 0-2-2h-1V.5a.5.5 0 0 0-1 0V1H4zM16 14V5H0v9a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2M9.5 7h1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-1a.5.5 0 0 1-.5-.5v-1a.5.5 0 0 1 .5-.5m3 0h1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-1a.5.5 0 0 1-.5-.5v-1a.5.5 0 0 1 .5-.5M2 10.5a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-1a.5.5 0 0 1-.5-.5zm3.5-.5h1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-1a.5.5 0 0 1-.5-.5v-1a.5.5 0 0 1 .5-.5" />
        </svg>
    </div>
    <h1 class="display-5 fw-bold text-body-emphasis">Фенологический календарь</h1>
    
    <footer class="text-body-secondary"></footer>
    <div class="col-lg-6 mx-auto"> 
        <div style=""><p class="lead mb-4">Внимание! Это Бета-версия сайта, предназначенная для тестирования. Она не отображает финального качества продукта. Спасибо за понимание и поддержку. Удачи!</p></div>
        <div class="d-grid gap-2 d-sm-flex justify-content-sm-center">
        </div>
    </div> 
</div>

<div class="bg-image-search" style="background-image: url(@linkImg);">
    <div class="container py-4">
        <div class="p-5 mb-4 bg-body-tertiary-theory rounded-3" style="background-color: rgba(211, 211, 211, 0.9); border-radius: 15px;">
            <div class="container-fluid py-5">
                <div class="d-flex justify-content-center align-items-center mb-4">
                    <div class="d-flex align-items-center">
                        <div class="me-2" style="max-width: 500px; flex-grow: 1;">
                            <BlazoredTypeahead
                                SearchMethod="AutoSearch"
                                @bind-Value="SelectedPests"
                                Placeholder="Введите название вредителя"
                                class="form-control"
                                style="height: 40px; padding: 10px;"> 
                                <SelectedTemplate>
                                    @context.PestsName
                                </SelectedTemplate>
                                <ResultTemplate>
                                    <b>@context.PestsName</b>
                                </ResultTemplate>
                            </BlazoredTypeahead>
                        </div>
                        <button class="btn btn-outline-success" type="submit" @onclick="popit">Найти</button>
                    </div>
                </div>

                <div class="row flex-lg-row-reverse align-items-center g-5 py-5">
                    <div class="col-10 col-sm-8 col-lg-6">
                        <img src="@linkImg" class="d-block mx-lg-auto img-fluid" alt="Bootstrap Themes" width="700" height="500" loading="lazy" style="border-radius: 25px;">
                    </div>
                    <div class="col-lg-6">
                        <h1 class="display-5 fw-bold text-body-emphasis lh-1 mb-3">@namess</h1>
                        <p class="lead">@theory</p>
                        <div class="d-grid gap-2 d-md-flex justify-content-md-start">
                            <button type="button" class="btn btn-primary btn-lg px-4 me-md-2" onclick="window.open('@linkWIki', '_blank');">Подробнее про @namess</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>




@code {
    private List<Pests> pests;
    private Pests SelectedPests;

    protected override void OnInitialized()
    {
        pests = new List<Pests>
        {
            new Pests("Тепличная белокрылка"),
            new Pests("Тепличный трипс"),
        };
    }

    private async Task<IEnumerable<Pests>> AutoSearch(string searchPests)
    {
        if (string.IsNullOrEmpty(searchPests))
        {
            return new List<Pests>();
        }
        return await Task.FromResult(pests.Where(x => x.PestsName.ToLower().Contains(searchPests.ToLower())).ToList());
    }

    newDesignPhenologicalcalendar.CallDB callDB = new newDesignPhenologicalcalendar.CallDB();

    string[] info = new string[4];

    private string searchText = string.Empty;

    private List<DataService.DayData> searchResult;

    private string notFound = "";

    private string namess = "Вредители";
    private string theory = "Вредитель — это животное, которое причиняет ущерб здоровью человека или его хозяйству, понимая последнее в самом широком смысле. Вредитель снижает урожайность и качество продукции, нанося тем самым огромный экономический ущерб.";
    private string linkImg = "https://belhp.by/upload/iblock/a84/18p4m1fos0s2z80jsspvdqvo39k01nu3.jpg";
    private string linkWIki = "https://ru.wikipedia.org/wiki/%D0%92%D1%80%D0%B5%D0%B4%D0%B8%D1%82%D0%B5%D0%BB%D1%8C_(%D0%B6%D0%B8%D0%B2%D0%BE%D1%82%D0%BD%D0%BE%D0%B5)";
    private bool isPestFound = false;

    private void OnPestSelected()
    {
        searchText = SelectedPests?.PestsName;
    }

    public void popit()
    {
        OnPestSelected(); // Ensure searchText is updated

        if (!string.IsNullOrEmpty(searchText))
        {
            info = callDB.calldbkak($"SELECT * FROM pests WHERE namess = '{searchText}'");

            if (info[1] == null)
            {
                notFound = "Вредитель не найден";
                isPestFound = false;
            }
            else
            {
                namess = info[0];
                theory = info[1];
                linkImg = info[2];
                linkWIki = info[3];
                isPestFound = true;
            }
            Console.WriteLine($"Пользователь успешно нашёл: {searchText}");
        }
        else
        {
            Console.WriteLine($"Пользователь не ввёл текст для поиска");
            isPestFound = false;
        }
    }
}




<style>
    .search-form-container {
        display: flex;
        align-items: center;
        justify-content: center;
        margin-bottom: 1rem;
    }

    .month-dropdown {
        width: 200px;
        padding: 10px;
        margin-right: 10px;
    }

    button {
        padding: 10px 20px;
    }
</style>

<div>
    <div class="px-4 pt-5 my-5 text-center border-bottom">
        <h1 class="display-4 fw-bold text-body-emphasis">Рассчитать фенологический календарь</h1>
        
        <EditForm Model="@dateModel" OnValidSubmit="@HandleSearch">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="date-form-container">
                <div class="date-form">
                    <div class="search-form-container">
                        <InputSelect @bind-Value="dateModel.Month" class="month-dropdown" disabled="@(isPestFound ? false : true)" style="border-radius: 5px;">
                            <option value="">Выберите месяц</option>
                            @foreach (var month in months)
                            {
                                <option value="@month">@month</option>
                            }
                        </InputSelect>
                        <button @onclick="HandleSearch" class="btn btn-primary" disabled="@(isPestFound ? false : true)">Рассчитать</button>
                    </div>
                </div>
            </div>
        </EditForm>
        
        @if (isLoading)
        {
            <div class="loading-spinner">
                <p>Загрузка...</p>
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
        }
     
        @if (selectedMonthName != null && dataList != null && !isLoading)
        {
            <h4>Результаты для месяца: @selectedMonthName</h4>
            <div style="display: flex; justify-content: center;">
                <table class="table" style="width: 80%; max-width: 800px; border-collapse: collapse;">
                    <thead>
                        <tr>
                            <th style="padding: 8px; border: 1px solid #ddd;">День</th>
                            <th style="padding: 8px; border: 1px solid #ddd;">Этап</th>
                        </tr>
                    </thead>
                    <tbody>
                        @for (int i = 0; i < dataList.Count; i++)
                        {
                            var data = dataList[i];
                            <tr style="background-color: @(i % 2 == 0 ? "#f2f2f2" : "white");">
                                <td style="padding: 8px; border: 1px solid #ddd;">@data.Day</td>
                                <td style="padding: 8px; border: 1px solid #ddd;">
                                    @if (data.Stage == 1)
                                    {
                                        <img src="img/Larva.png" alt="Stage 3" style="width: 40px; height: 40px;" />
                                        <img src="img/Imago.png" alt="Stage 1" style="width: 40px; height: 40px;" />
                                        <p>Личинка / Имаго </p>
                                    }
                                    else if (data.Stage == 2)
                                    {
                                        <img src="img/Imago.png" alt="Stage 1" style="width: 40px; height: 40px;" />
                                        <img src="img/Egg.png" alt="Stage 2" style="width: 40px; height: 40px;" />
                                        <p>Имаго / Яйцо </p>
                                    }
                                    else if (data.Stage == 3)
                                    {
                                        <img src="img/Imago.png" alt="Stage 1" style="width: 40px; height: 40px;" />
                                        <img src="img/Egg.png" alt="Stage 2" style="width: 40px; height: 40px;" />
                                        <img src="img/Larva.png" alt="Stage 3" style="width: 40px; height: 40px;" />
                                        <p>Имаго / Яйцо / Личинка </p>
                                    }
                                    else if (data.Stage == 4)
                                    {
                                        <img src="img/Egg.png" alt="Stage 2" style="width: 40px; height: 40px;" />
                                        <img src="img/Larva.png" alt="Stage 3" style="width: 40px; height: 40px;" />
                                        <img src="img/Imago.png" alt="Stage 1" style="width: 40px; height: 40px;" />
                                        <p>Яйцо / Личинка / Имаго </p>
                                    }
                                    else if (data.Stage == 5)
                                    {
                                        <img src="img/Larva.png" alt="Stage 3" style="width: 40px; height: 40px;" />
                                        <img src="img/Imago.png" alt="Stage 1" style="width: 40px; height: 40px;" />
                                        <img src="img/Egg.png" alt="Stage 2" style="width: 40px; height: 40px;" />
                                        <p>Личинка / Имаго / Яйцо </p>
                                    }
                                    else if (data.Stage == 6)
                                    {
                                        <img src="img/Imago.png" alt="Stage 1" style="width: 40px; height: 40px;" />
                                        <img src="img/Larva.png" alt="Stage 3" style="width: 40px; height: 40px;" />
                                        <img src="img/Egg.png" alt="Stage 2" style="width: 40px; height: 40px;" />
                                        <p>Имаго/ Личинка / Яйцо </p>
                                    }
                                    else if (data.Stage == 7)
                                    {
                                        <img src="img/Imago.png" alt="Stage 1" style="width: 40px; height: 40px;" />
                                        <img src="img/Larva.png" alt="Stage 3" style="width: 40px; height: 40px;" />
                                        <p>Имаго / Личинка </p>
                                    }
                                    else
                                    {
                                        @data.Stage
                                    }
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
           
        @code {
            private DateModel dateModel = new DateModel();
            private string selectedMonthName;
            /*private string searchText;*/ // Название вредителя
            private List<DataService.DayData> dataList = new List<DataService.DayData>(); // Инициализация
            private bool isLoading = false; // Переменная для отслеживания состояния загрузки

            private List<string> months = new List<string>
            {
                "Январь", "Февраль", "Март", "Апрель", "Май", "Июнь", "Июль", "Август", "Сентябрь", "Октябрь", "Ноябрь", "Декабрь"
            };

            private async Task HandleSearch()
            {
                isLoading = true; // Начало загрузки
                StateHasChanged(); // Обновляем UI, чтобы показать спиннер

                // Искусственная задержка для имитации долгой загрузки
                await Task.Delay(1000); // 2000 миллисекунд = 2 секунды

                if (months.Contains(dateModel.Month))
                {
                    selectedMonthName = dateModel.Month;
                    // Приведение пользовательского ввода к нижнему регистру и удаление пробелов
                    string cleanedTableName = searchText.Replace(" ", "").ToLower();

                    // Вызов метода DataService с передачей очищенного названия вредителя и месяца
                    dataList = await dataService.GetDataByTableAsync(cleanedTableName, selectedMonthName) ?? new List<DataService.DayData>();
                }
                else
                {
                    Console.WriteLine("Неправильный месяц");
                }

                isLoading = false; // Окончание загрузки
                StateHasChanged(); // Обновляем UI, чтобы скрыть спиннер и показать результаты
            }

            public class DateModel
            {
                [Required(ErrorMessage = "Месяц обязателен")]
                public string Month { get; set; }
            }
        }
    </div>
</div>



<footer class="pt-3 mt-4 text-body-secondary border-top">
<p align="center" style="font-size: 10px;">
    <br>
    Все права защищены. Авторы проекта не несут ответственности
    за точность расчета фенологического календаря и за возможные негативные<br>
    последствия, возникшие при использовании информации с сайта.
    Прогностическая информация на сайте носит исключительно<br>
    ознакомительный характер и ее перепечатка в СМИ запрещена.
    Для принятия решений необходимо руководствоваться официальными<br>
    расчетами фенологического календаря.  © 2024 <br>

</p>
</footer>